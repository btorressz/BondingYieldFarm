{
	"compiler": {
		"version": "0.8.28+commit.7893614a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_rewardCoefficient",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_maxDepositPerUser",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_totalMaxLiquidity",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "EmergencyWithdrawal",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalFees",
						"type": "uint256"
					}
				],
				"name": "FeesDistributed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardCoefficient",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "maxDepositPerUser",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalMaxLiquidity",
						"type": "uint256"
					}
				],
				"name": "PoolInitialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bool",
						"name": "isPaused",
						"type": "bool"
					}
				],
				"name": "PoolPaused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewards",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "autoCompounded",
						"type": "bool"
					}
				],
				"name": "Staked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "Withdrawn",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "stakeTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "lastUpdate",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rewardCoefficient",
						"type": "uint256"
					}
				],
				"name": "calculateBoostedReward",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "distributeFees",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "emergencyWithdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "feePool",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getStakers",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pool",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "totalLiquidity",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rewardCoefficient",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "feeRate",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "lastUpdate",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "topStaker",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "topStakerAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalRewardsDistributed",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "maxDepositPerUser",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalMaxLiquidity",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "isPaused",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "autoCompound",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "lockupPeriod",
						"type": "uint256"
					}
				],
				"name": "stake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "stakers",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "togglePause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "userPositions",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "stakeTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "unlockTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "feeShare",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "A staking contract for yield farming with rewards and withdrawal fees. This contract supports emergency withdrawal, rewards calculation, and fee distribution.",
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"calculateBoostedReward(uint256,uint256,uint256,uint256)": {
					"params": {
						"amount": "The amount of tokens staked",
						"lastUpdate": "The timestamp of the last pool update",
						"rewardCoefficient": "The coefficient used to calculate rewards",
						"stakeTime": "The timestamp when the stake was made"
					}
				},
				"constructor": {
					"params": {
						"_maxDepositPerUser": "Maximum amount a user can deposit into the pool",
						"_rewardCoefficient": "The coefficient used to calculate rewards",
						"_token": "The ERC20 token used for staking",
						"_totalMaxLiquidity": "Maximum total liquidity allowed in the pool"
					}
				},
				"getStakers()": {
					"returns": {
						"_0": "stakers List of staker addresses"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"stake(uint256,bool,uint256)": {
					"params": {
						"amount": "The amount of tokens to stake",
						"autoCompound": "Whether to auto-compound the rewards or not",
						"lockupPeriod": "The lockup period in seconds, which determines when the stake can be withdrawn"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"withdraw(uint256)": {
					"params": {
						"amount": "The amount of tokens to withdraw"
					}
				}
			},
			"title": "Bonding Yield Farm Contract",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"calculateBoostedReward(uint256,uint256,uint256,uint256)": {
					"notice": "Calculate the boosted rewards based on the staked amount, stake time, last update time, and the pool's reward coefficient."
				},
				"constructor": {
					"notice": "Constructor to initialize the contract with initial parameters"
				},
				"distributeFees()": {
					"notice": "Distribute accumulated fees to all stakers proportionally to their stake amounts."
				},
				"emergencyWithdraw()": {
					"notice": "Allow a user to withdraw their entire stake immediately in an emergency (bypassing lockups and fees)."
				},
				"getStakers()": {
					"notice": "Get the list of all stakers in the pool."
				},
				"stake(uint256,bool,uint256)": {
					"notice": "Stake a certain amount of tokens into the pool and optionally auto-compound rewards."
				},
				"togglePause()": {
					"notice": "Toggle the paused state of the pool (only callable by the owner)."
				},
				"withdraw(uint256)": {
					"notice": "Withdraw a specified amount of tokens from the pool, subject to withdrawal fees and lockup periods."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/BondingYieldFarm.sol": "BondingYieldFarm"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
			"license": "MIT",
			"urls": [
				"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
				"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"contracts/BondingYieldFarm.sol": {
			"keccak256": "0xb4a5408492a3901a712ceea7b81452e31c853e38040cab7a0a58d0a187fb25b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://f87705467afd99859e5521653819ae5c654ba4e6ae7c76bbf7accd56c28b78e6",
				"dweb:/ipfs/QmYXYhT9acEUiQAiWBr5zEfRgWrphAwe56Tv9k2dDGxuJ8"
			]
		}
	},
	"version": 1
}